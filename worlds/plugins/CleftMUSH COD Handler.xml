<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<!-- Plugin "CODclient Handler" generated by Plugin Wizard -->

<!-- Made for Cleft of Dimensions -->


<muclient>
<plugin
   name="CleftMUSH_COD_Handler"
   author="Asmodeus"
   id="04d9e64f835453c045b427b2"
   language="Lua"
   purpose="Multipurpose Utility"
   save_state="y"
   date_written="2019-01-04"
   requires="4.00"
   version="1.1"
   >

<description trim="y">
Multipurpose utility with sounds

</description>

</plugin>
<triggers>
  <trigger
   enabled="y"
   match="You think, &quot;*&quot;"
   omit_from_output="y"
   keep_evaluating="y"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="n"
   match="^kxwt\_waypoint$"
   omit_from_log="y"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
<send>
Sound("stop=all")
musicPlaying = false
</send>
  </trigger>
  <trigger
   enabled="y"
   group="linkify"
   match="^(?&lt;pre&gt;You think( to yourself| to say)?\,? (\&quot;|\')?)(?&lt;reply&gt;.*?)(?&lt;pst&gt;(\&quot;|\')?)$"
   regexp="y"
   script="hl_splitreply"
   send_to="14"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="^kxwt_emote (.*)$"
   omit_from_log="y"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="1"
  >
  <send>
Note("%1")
</send>
  </trigger>
  <trigger
   enabled="y"
   match="^kxwt\_group\_start$"
   omit_from_log="y"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>
kplayers={}
kminions={}
kotherminions={}
kpcount = 0
</send>
  </trigger>
   <trigger
 enabled="y"
 match="^kxwt_spellup (.*)"
regexp="y"
 send_to="14"
 sequence="99"
omit_from_output="y"
 >

 </trigger>
<trigger
 enabled="y"
 match="kxwt_audio *"
 omit_from_output="y"
 omit_from_log="y"
 sequence="100"
 >
 </trigger>
<trigger
 enabled="y"
 match="kxwt_action *"
 omit_from_output="y"
 omit_from_log="y"
 sequence="100"
 >
 </trigger>
 <trigger
 enabled="y"
 match="^kxwt_spelldown (.*)"
regexp="y"
 send_to="14"
 sequence="99"
omit_from_output="y"
 >

 </trigger>
  <trigger
   enabled="n"
   match="^kxwt_walkdir (\d+)"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >

  </trigger>
   <trigger
   enabled="n"
   match="^kxwt_group (?P&lt;hp&gt;-?\d+) (?P&lt;mhp&gt;\d+) (?P&lt;mn&gt;-?\d+) (?P&lt;mmn&gt;\d+) (?P&lt;mv&gt;-?\d+) (?P&lt;mmv&gt;\d+) (?P&lt;tag&gt;\S+) (?P&lt;name&gt;.*)"
   omit_from_output="y"
   regexp="y"
   sequence="100"
  >
  </trigger>

  <trigger
   enabled="y"
   match="^kxwt_rvnum (\d+)"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   match="kxwt_supported"
   omit_from_output="y"
   sequence="100"
  >
  <send>set kxwt on
set cprefix ~R~H[]~O</send>
  </trigger>
<trigger
 enabled="y"
 match="kxwt_idle"
 omit_from_output="y"
 omit_from_log="y"
 sequence="100"
 >
<send>l</send>
 </trigger>
    <trigger
   enabled="y"
   match="kxwt_nocast"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>
nocastroom=true
</send>
</trigger>
 <trigger
   enabled="y"
   match="kxwt_expcap *"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>k_cap=tonumber("%1")</send>
  </trigger>
  <trigger
   enabled="y"
   match="kxwt_obj_zap *"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>
print ZAPPED
</send>
  </trigger>
  <trigger
 enabled="y"
 match="^kxwt_prompt (-{0,1}\d+) (-{0,1}\d+) (-{0,1}\d+) (-{0,1}\d+) (-{0,1}\d+) (-{0,1}\d+)"
sequence="1"
regexp="y"
 send_to="14"
omit_from_output="y"
 omit_from_log="y"
 >
 </trigger>
 <trigger
 enabled="y"
 match="^kxwt_area (-{0,1}\d+) (.*)"
sequence="3"
regexp="y"
 send_to="14"
omit_from_output="y"
 omit_from_log="y"
 >
 </trigger>
 <trigger
   enabled="y"
   match="^\*pong\*$"
   omit_from_log="y"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>
  Send("pang")
  </send>
  </trigger>

  <trigger
   enabled="y"
   match="^\*pingtime (\d+)\*$"
   omit_from_log="y"
   omit_from_output="y"
   regexp="y"
   send_to="14"
   sequence="100"
  >
  <send>
  lag = tonumber("%1")
  if lag &lt; 999.5 then
   lag = (math.floor(lag+0.5)).." ms"
  elseif lag &lt; 9999.5 then
   lag = (math.floor(lag/10+0.5)/100).." s"
  else
   lag = (math.floor(lag/100+0.5)/10).." s"
  end
  if lagbrag then
   Send(lagbrag.." I currently have a connection lag of "..lag..".")
   lagbrag = nil
  else
   Note("Lag: "..lag)
  end
  </send>
  </trigger>
 <trigger
 enabled="y"
 match="lagcheck"
 omit_from_output="y"
keep_evaluating="y"
 sequence="100"
 >
 </trigger>

<trigger
   expand_variables="y"
   group="notes"
   match="[* ] *: *"
   name="note_list"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>Hyperlink ("note read %1", "%0", "Read note", "white", "black", 0)</send>
  </trigger>	
  <trigger
   group="changes"
   match="[* ] *: *"
   name="change_list"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>Hyperlink ("change read %1", "%0", "Read note", "white", "black", 0)</send>
  </trigger>
  <trigger
   group="news"
   match="[* ] *: *"
   name="news_list"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>Hyperlink ("news read %1", "%0", "Read news", "white", "black", 0)</send>
  </trigger>
  <trigger
   group="idea"
   match="[* ] *: *"
   name="idea_list"
   omit_from_output="y"
   send_to="14"
   sequence="100"
  >
  <send>Hyperlink ("idea read %1", "%0", "Read idea", "white", "black", 0)</send>
  </trigger>

-----------------------------------------------------------------------------------
-- FAME SECTION
-----------------------------------------------------------------------------------

  <trigger
   enabled="y"
   match="^\( 6\)A wino sits on the ground, a bottle in his hand\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourTell (
"white","black", "( 6)",
"yellow", "black", "(FAME)",
"darkcyan", "black", " A wino sits on the ground, a bottle in his hand.")  </send>
  </trigger>

  <trigger
   enabled="y"
   match="^A gypsy wino is DEAD\!$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourTell (
"mediumpurple", "black", "You will gain a ",
"yellow","black", "(FAME)",
"mediumpurple", "black", " point for killing A gypsy wino!") </send>
  </trigger>

  <trigger
   enabled="y"
   match="^\( 6\)An old man rests on a stool\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourTell (
"white","black", "( 6)",
"yellow", "black", "(FAME)",
"darkcyan", "black", " An old man rests on a stool.")  </send>
  </trigger>

  <trigger
   enabled="y"
   match="^An elderly gypsy man is DEAD\!$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourTell (
"mediumpurple", "black", "You will gain a ",
"yellow","black", "(FAME)",
"mediumpurple", "black", " point for killing An elderly gypsy man!") </send>
  </trigger>
  <trigger
   enabled="y"
   match="^\( 6\)A woman chats with her friend\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourTell (
"white","black", "( 6)",
"yellow", "black", "(FAME)",
"darkcyan", "black", " A woman chats with her friend.")  </send>
  </trigger>

  <trigger
   enabled="y"
   match="^An excited gypsy woman is DEAD\!$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourTell (
"mediumpurple", "black", "You will gain a ",
"yellow","black", "(FAME)",
"mediumpurple", "black", " point for killing An excited gypsy woman!") </send>
  </trigger>
  <trigger
   enabled="y"
   match="^\( 6\)A wizard is here, studying a magic tome\.$"
   omit_from_output="y"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourTell (
"white","black", "( 6)",
"yellow", "black", "(FAME)",
"darkcyan", "black", " A wizard is here, studying a magic tome.")  </send>
  </trigger>

  <trigger
   enabled="y"
   match="^A travelling magician is DEAD\!$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourTell (
"mediumpurple", "black", "You will gain a ",
"yellow","black", "(FAME)",
"mediumpurple", "black", " point for killing A travelling magician!") </send>
  </trigger>


-----------------------------------------------------------------------------------
-- COLORS SECTION
-----------------------------------------------------------------------------------

 <trigger
 enabled="y"
 match="kxwt_edeath *"
 omit_from_output="y"
 omit_from_log="y"
 send_to="14"
 sequence="100"
 >
<send>ColourNote("red", "", "GROUP: %1 has just been KILLED!")</send>
</trigger>

  <trigger
   enabled="y"
   match="You drive a stake through *'s shadow, pinning it in place!"
   omit_from_output="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("blueviolet", "", "You drive a stake through %1 shadow, pinning it in place!")</send>
  </trigger>
  <trigger
   enabled="y"
   match="Your sickening touch spreads to * as you hit it!"
   omit_from_output="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("lime", "", "Your sickening touch spreads to %1 as you hit it!")</send>
  </trigger>
  <trigger
   enabled="y"
   match="* concentrates, and conjures a huge wall of ice."
   omit_from_output="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("cyan", "", "%1 concentrates, and conjures a huge wall of ice.")</send>
  </trigger>
  <trigger
   enabled="y"
   match="The white aura around your body fades."
   omit_from_output="n"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("yellow", "", "WARNING: SANCTUARY DOWN")</send>
  </trigger>
  <trigger
   enabled="y"
   match="* utters the words, 'yrmnortcyrt'."
   omit_from_output="y"
   send_to="12"
   sequence="100"
  >
  <send>ColourNote("darkgrey", "", "%1 utters the words, 'yrmnortcyrt'. (Enchantment)")</send>
  </trigger>
  <trigger
   enabled="y"
   match="Double mob experience is now enabled!"
   omit_from_output="y"
   send_to="12"
   sequence="100"
  >
  <send>
ColourNote("lime", "black", "---------------------------")
ColourNote("lime", "black", "| DOUBLE EXP MODE ENABLED |")
ColourNote("lime", "black", "---------------------------")
</send>
  </trigger>
  <trigger
   enabled="y"
   match="Double experience caps for mob kills are now enabled!"
   omit_from_output="y"
   send_to="12"
   sequence="100"
  >
  <send>
ColourNote("lime", "black", "---------------------------")
ColourNote("lime", "black", "| DOUBLE CAP MODE ENABLED |")
ColourNote("lime", "black", "---------------------------")
</send>
  </trigger>
</triggers>




-----------------------------------------------------------------------------------
-- SOUNDS SECTION 
-----------------------------------------------------------------------------------
  <aliases>
<alias
   match="volume *"
        send_to="12"
   enabled="y"
   sequence="100"
  >
<send>Sound("volume=%1")
   ColourNote ("yellow", "", "Volume changed to %1.")
</send>
</alias> 
</aliases>
<triggers>
<trigger
 enabled="y"
 match="[SND_COD_*]"
 sequence="100"
 omit_from_output="y"
 send_to="14"
 >
<send>
Sound ("sounds/COD_%1.wav") 
</send>
 </trigger>
 <trigger
 enabled="y"
 match="* replies to you, '*'"
 sequence="100"
 send_to="14"
 >
<send>
Sound ("sounds/tell.wav") 
</send>
 </trigger>
 <trigger
 enabled="y"
 match="^\w+ tells you '.*'$"
 regexp="y"
 sequence="100"
 send_to="14"
 >
<send>
Sound ("sounds/tell.wav") 
</send>
 </trigger>
 <trigger
 enabled="y"
 match="* <Group> '*'"
 sequence="100"
 send_to="14"
 >
<send>
Sound ("sounds/gtell.wav") 
</send>
 </trigger>
 <trigger
 enabled="y"
 match="^The Bambino Bomb violently explodes\!\!\!$"
 regexp="y"
 sequence="100"
 send_to="14"
 >
<send>
Sound ("sounds/secret.wav") 
</send>
 </trigger>
 <trigger
 enabled="y"
 match="^Ding, dong, ding, dong. Leene's Bell reverberates through the city.$"
 regexp="y"
 sequence="100"
 send_to="14"
 >
<send>
Sound ("sounds/leene.wav") 
</send>
 </trigger>
 <trigger
 enabled="y"
 match="You buy * for *."
 sequence="100"
 send_to="14"
 >
<send>
Sound ("sounds/Purchase.wav") 
</send>
 </trigger>
<trigger
    enabled="y"
    match="* says (OOC) '*'"
    omit_from_output="n"
 send_to="14"
    sequence="100"
    ><send>
Sound ("sounds/spouse.wav") 
</send></trigger>
 <trigger
 enabled="y"
 match="You get * from the corpse of *"
 sequence="100"
 send_to="14"
 >
<send>
Sound ("sounds/Item.wav") 
</send>
 </trigger>
 <trigger
   enabled="y"
   group="equip"
   match="^You wear .* on .*\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Sound ("sounds/equip.wav")
EnableTriggerGroup("equip", false)
DoAfterSpecial (0.2, 'EnableTriggerGroup ("equip", true)', sendto.script) </send>
  </trigger>
 <trigger
   enabled="y"
   group="equip"
   match="^You wear your equipment\.$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Sound ("sounds/equip.wav")
EnableTriggerGroup("equip", false)
DoAfterSpecial (0.2, 'EnableTriggerGroup ("equip", true)', sendto.script) </send>
  </trigger>
 <trigger
 enabled="y"
 match="^kxwt_walkdir (\d+)"
 regexp="y"
 omit_from_output="y"
 sequence="100"
 send_to="14"
 >
<send>
Sound ("sounds/Walk.wav") 
</send>
 </trigger>
 <trigger
 enabled="y"
 match="Your leaping attack *** DEMOLISHES *** *!"
 sequence="100"
 send_to="14"
 >
<send>
Sound ("sounds/demolishleap.wav") 
</send>
 </trigger>
 <trigger
 enabled="y"
 match="You close *."
 sequence="100"
 send_to="14"
 >
<send>
Sound ("sounds/door.wav") 
</send>
 </trigger>
 <trigger
 enabled="y"
 match="You open *."
 sequence="100"
 send_to="14"
 >
<send>
Sound ("sounds/door.wav") 
</send>
 </trigger>
<trigger
 enabled="y"
 match="* throws * head back and cackles with insane glee."
regexp="n"
 sequence="100"
 send_to="14"
 >
<send>
Sound ("sounds/cackle.wav") 
</send>
 </trigger>
<trigger
 enabled="y"
 match="You throw back your head and cackle with insane glee!"
regexp="n"
 sequence="100"
 send_to="14"
 >
<send>
Sound ("sounds/cackle.wav") 
</send>
 </trigger>
<trigger
 enabled="y"
 match="The white aura around your body fades."
regexp="n"
 sequence="100"
 send_to="14"
 >
<send>
Sound ("sounds/sancfall.wav") 
</send>
 </trigger>
 <trigger
 enabled="y"
 group="generalSounds"
 match="* is DEAD!"
 keep_evaluating="y"
 omit_from_output="n"
 sequence="100"
 send_to="14"
 >
<send>
Sound ("sounds/death.mp3")
</send>
 </trigger>

------------------------------------------------------------------------------------
-- WEAPON BATTLE SOUNDS
------------------------------------------------------------------------------------
  <trigger
   enabled="y"
   group="Battle_Weapons"
   match="^(You|\w+) (is bitten by|have BITTEN|bite|BITE|have bitten) (.*)(?:\.|!|!!|!!!) (?:(\(\d+\)|\*dodge\*|\*miss\*|\*shell\*|\*block\*|\*parry\*)\s?)+$"
   regexp="y"
   send_to="12"
   sequence="100"
  >
  <send>Sound ("sounds/bite.wav") </send>
  </trigger>


------------------------------------------------------------------------------------
-- MUSIC SECTION
------------------------------------------------------------------------------------

 <trigger
 enabled="y"
 match="kxwt_area 5400 Underwater ruins, watery passages"
 regexp="n"
 omit_from_output="y"
 sequence="1"
 send_to="14"
 >
  <send>if musicPlaying == false then
			musicPlaying = true
			Sound("loop=sounds/uw_ruins.mp3")
		end -- if musicPlaying</send></trigger>
</triggers>
------------------------------------------------------------------------------------
-- ALIASES SECTION 
------------------------------------------------------------------------------------

   <aliases>
   <alias
   match="kxwt_area --printareanumber"
	send_to="12"
   enabled="y"
   sequence="100"
  >
<send>Note(areanumber)</send></alias>
   <alias
   match="mute"
	send_to="12"
   enabled="y"
   sequence="100"
  >
<send>Sound("stop=all")
musicPlaying = false
   ColourNote ("yellow", "", "Current Music Stopped.")
</send>
</alias>

  <alias
   match="dbn"
send_to="12"
   enabled="y"
   sequence="100"
  >
  <send>if debugging==1 then
			debugging=0
			Note("debugging disabled")
		else
			Note("debugging enabled")
			debugging=1
		end</send></alias>
  <alias
   match="dbn"
	send_to="12"
   enabled="y"
   sequence="100"
  >
  <send>if debugging==1 then
			debugging=0
			Note("debugging disabled")
		else
			Note("debugging enabled")
			debugging=1
		end</send></alias>
  <alias
   match="random * *"
	send_to="12"
   enabled="y"
   sequence="100"
  >
  <send>print(random(%1,%2))</send></alias>

 <alias
 match="lag"
 enabled="y"
 send_to="12"
 sequence="100"
 >
 <send>
lagbrag = nil
Send("ping")
</send>
 </alias>
 <alias
 match="brag * lag"
 enabled="y"
 send_to="12"
 sequence="100"
 >
 <send>
lagbrag="%1"
Send("ping")
</send>
 </alias>
  <alias
   match="tracker *"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>Simulate("\\n{D[{RT{rr{Ra{rc{Rk{re{Rr{D]: %1\\n")</send>
  </alias>

 <alias
   match="change list"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>EnableTriggerGroup("changes", true)
Execute("chang list")
ColourNote("red", "", "Changes List:")
DoAfterSpecial (1, 'EnableTriggerGroup ("changes", false)', sendto.script)</send>
  </alias>
  <alias
   match="note list"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>EnableTriggerGroup("notes", true)
Execute("not list")
ColourNote("red", "", "Note List:")
DoAfterSpecial (1, 'EnableTriggerGroup ("notes", false)', sendto.script)</send>
  </alias>
  <alias
   match="news list"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>EnableTriggerGroup("news", true)
Execute("new list")
ColourNote("red", "", "News List:")
DoAfterSpecial (1, 'EnableTriggerGroup ("news", false)', sendto.script)</send>
  </alias>
  <alias
   match="idea list"
   enabled="y"
   send_to="12"
   sequence="100"
  >
  <send>EnableTriggerGroup("idea", true)
Execute("ide list")
ColourNote("red", "", "Idea List:")
DoAfterSpecial (1, 'EnableTriggerGroup ("idea", false)', sendto.script)</send>
  </alias>


  </aliases>
  


<!--  Script  -->

<script>
<![CDATA[
require "utility"
dofile(GetPluginInfo(GetPluginID(), 20) .. "cleft_colors.lua")

uid=""
musicPlaying = false
function OnPluginInstall()
  uid=GetVariable("id")
  if(uid==NIL) then
    uid=GetUniqueID()
  end
end
function OnPluginSaveState ()
  SetVariable("id",uid)
end

function random(num1, num2)
	math.randomseed(os.time())
	math.random(); math.random();
	math.random(); math.random();
	randomNumber =  math.random(num1, num2)
	return randomNumber
end

	function intercourse_response (name, line, wildcards, styles)
  reply="say "..wildcards[1]
  Hyperlink(reply, line, reply, "yellow", "black", 0);
end -- function

function hl_reply (name, line, wildcards, styles)
	-- The trigger should be sending the named match "reply"
	-- This should call that up and make a hyperlink.
	
	-- Note (line)
  reply="say "..wildcards["reply"]
  Hyperlink(reply, line, reply, "yellow", "black", 0)
end -- function

function hl_splitreply (name, line, wildcards, styles)
	-- The trigger should be sending the named match "reply" for what to say
	-- "pre" for what to place before the response.
	-- "pst" for what to place after.
	
	-- Note (line)
  reply="say "..wildcards["reply"]
  Tell (wildcards["pre"])
  Hyperlink(reply, wildcards["reply"], reply, "yellow", "black", 0)
  Tell (wildcards["pst"])
end -- function

function hl_middle (name, line, wildcards, styles)
	-- This is currently useless until I can figure out how to send an argument for the hyperlink to DO.
	-- Nevertheless, let's see: 
	-- The strings pre and pst are not hypertext and should be displayed as normal.
	-- "pre" before the link 
	-- "pst" after the link
	-- "mid" is displayed as the link text
	-- "act" is the link contents, itself
	-- "tip" is the helper popup text for the link
	-- now, how we go about setting all this up, I neither know nor care.
	
	-- Chaining functions is a pretty obvious part of that.
	pre=wildcards["pre"]
  mid=wildcards["pre"]
  pst=wildcards["pst"]
  act=wildcards["act"]
  tip=wildcards["tip"]
  Tell (pre)
  Hyperlink(act, mid, tip, "yellow", "black", 0);
  Tell (pst)
end -- function
--  Note (line) --Displays a line on screen with a line feed, vs. Tell (phrase) which does not.
--  Send (line) --Sends the line to the MUD
--  reply="say "..wildcards [1]
-- Whoopsie: This immediately sends.  Send ("say ", wildcards [1])
-- Later on, I might try to pull out and hyperlink JUST the phrase, for style points, but maybe not.
	

]]>
</script>
</muclient>
