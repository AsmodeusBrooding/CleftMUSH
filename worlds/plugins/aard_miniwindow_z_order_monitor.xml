<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="Miniwindow_Z_Order_Monitor"
   author="Fiendish"
   id="462b665ecb569efbf261422f"
   language="Lua"
   purpose="Monitors the z-order of plugin miniwindows to maintain uniqueness."
   date_written="2011-04-23 11:51:55"
   requires="4.73"
   version="2.0"
   save_state="y"
>

</plugin>
<!--  Script  -->

<script>
<![CDATA[

usedNumbers = {}



function OnPluginInstall()
   usedNumbers = {}
   BroadcastPlugin(996,"re-register z")
end

function OnPluginSaveState()
   arrangeZ() -- just rename for less confusing calls from the outside
end

-- Register a new miniwindow with the system.
--
-- To use this:
-- CallPlugin("462b665ecb569efbf261422f", "registerMiniwindow", windowID)
--
-- windowID MUST conform to the rules for variable names for SetVariable for this to work properly
-- with one exception: the name may start with a number rather than a
-- letter (if the name is based on a plugin UID, for example)
function registerMiniwindow(callerID)
   if callerID == nil then
      callerID = ""
   end
   local requestedZNumber = tonumber(GetVariable("a"..callerID))
   -- If we were previously using a particular spot and nothing else is
   -- already using it go ahead and assign that one. Otherwise find another
   -- spot for it.
   if requestedZNumber == nil or (usedNumbers[requestedZNumber] ~= callerID and usedNumbers[requestedZNumber] ~= nil) then
      requestedZNumber = (#usedNumbers)+1
      SetVariable("a"..callerID, requestedZNumber)
   end
   usedNumbers[requestedZNumber] = callerID
   WindowSetZOrder(callerID, requestedZNumber)
end

-- Bump the calling miniwindow to the front.
-- This also collapses the stack to eliminate gaps.
-- To use this:
-- CallPlugin("462b665ecb569efbf261422f", "boostMe", windowID)
function boostMe(callerID)
   local newNumbers = {}
   local i = 1
   for k,v in pairs(usedNumbers) do
      if v ~= callerID then
         newNumbers[i] = v
         i = i + 1
      end
   end
   newNumbers[i] = callerID
   usedNumbers = {}
   for k,v in pairs(newNumbers) do
      usedNumbers[k] = v
   end
   arrangeZ()
end

-- Drop the calling miniwindow to the back.
-- This also collapses the stack to eliminate gaps.
-- To use this:
-- CallPlugin("462b665ecb569efbf261422f", "dropMe", windowID)
function dropMe(callerID)
   local newNumbers = {}
   newNumbers[1] = callerID
   local i = 2
   for k,v in pairs(usedNumbers) do
      if v ~= callerID then
         newNumbers[i] = v
         i = i + 1
      end
   end

   usedNumbers = {}
   for k,v in pairs(newNumbers) do
      usedNumbers[k] = v
   end
   arrangeZ()
end

function arrangeZ()
   for k,v in pairs(usedNumbers) do
      WindowSetZOrder(v, k)
      SetVariable("a"..v, k)
   end
   CallPlugin("abc1a0944ae4af7586ce88dc", "BufferedRepaint")
end

function OnPluginDisable()
   EnablePlugin(GetPluginID(), true)
   ColourNote("white", "blue", "You are not allowed to disable the "..
   GetPluginInfo(GetPluginID(), 1).." plugin. It is necessary for other plugins.")
end

function getmemoryusage()
  collectgarbage('collect')
  return collectgarbage('count')
end

]]>

</script>
</muclient>
