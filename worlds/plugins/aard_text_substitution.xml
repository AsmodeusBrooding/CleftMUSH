<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<muclient>
<plugin
   name="CleftMUSH_Text_Substitutions"
   author="Fiendish"
   id="48f867c18f6ff1d6d3b52918"
   language="Lua"
   purpose="Replace text with other text"
   date_written="2016-12-27 01:00:00"
   requires="5.05"
   version="1.0"
   save_state="y"
   sequence="-10000"
>

<description trim="y">
This plugin substitutes text with something else.

It does not cross color code boundaries.
'#sub {potato} {pants}' will make @Mpotato@Cpants@Rairplane@w become @Mpants@Cpants@Rairplane@w
but will not do anything to @Mpot@Yato@Cpants@Rairplane@w because, in this one, the word
potato has a color break inside it.

Type "#sub help" or make a syntax mistake for usage details.
</description>
</plugin>
<aliases>

<alias
   match="^#subs? *$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
   script="listsub"
></alias>

<alias
   match="^#sub +\{(.*)\} *\{(.*)\}( *(#nocase)| *(#alone)| *(#function))* *$"
   regexp="y"
   enabled="y"
   sequence="100"
   ignore_case="y"
   script="addsub"
></alias>

<alias
   match="^#subs? ([\S]+).*$"
   enabled="y"
   regexp="y"
   sequence="200"
   ignore_case="y"
   script="helpsub"
></alias>

<alias
   match="^#unsub +#(\d+)$"
   regexp="y"
   enabled="y"
   sequence="100"
   ignore_case="y"
   script="remsub"
></alias>

<alias
   match="^#unsub.*$"
   enabled="y"
   regexp="y"
   sequence="101"
   ignore_case="y"
   script="helpsub"
></alias>

<alias
   match="^#gags? *$"
   enabled="y"
   regexp="y"
   sequence="100"
   ignore_case="y"
   script="listgag"
></alias>

<alias
   match="^#gag +\{(.*?)\}( *(#nocase)| *(#alone)| *\{(.*?)\})* *$"
   regexp="y"
   enabled="y"
   sequence="100"
   ignore_case="y"
   script="addgag"
></alias>

<alias
   match="^#gag ([\S]+).*$"
   enabled="y"
   regexp="y"
   sequence="200"
   ignore_case="y"
   script="helpsub"
></alias>

<alias
   match="^#ungag +#(\d+)$"
   regexp="y"
   enabled="y"
   sequence="100"
   ignore_case="y"
   script="remgag"
></alias>

<alias
   match="^#ungag.*$"
   enabled="y"
   regexp="y"
   sequence="101"
   ignore_case="y"
   script="helpsub"
></alias>

</aliases>

<!--
   <triggers>
   <trigger
      name="all"
      enabled="y"
      match="^(.*)$"
      omit_from_output="y"
      regexp="y"
      sequence="100"
      send_to="12"
      script="filter_trigger"
   >
   <send>
      StopEvaluatingTriggers(true)
   </send>
   </trigger>
   </triggers>
-->

<script>
<![CDATA[
-- fix stupid syntax highlighting in SublimeText --> '

require "aard_lua_extras"
require "serialize"
dofile(GetInfo(60) .. "aardwolf_colors.lua")

require "addxml"
function apply_pattern_as_trigger(original_pattern, nocase, alone)
   if pcall(
      addxml.trigger,
      {
         match = original_pattern:gsub("([^%%]?)%%([^%%])", "%1\\%2"), -- replace % escapes with \ escapes
         enabled = true,
         ignore_case = nocase,
         regexp = true,
         sequence = 100,
         omit_from_output = true,
         omit_from_log = true,
         name = "A"..GetUniqueID()..GetUniqueID(), -- need a name to set group
         script = "filter_trigger",
         send_to = sendto.script,
         send = "StopEvaluatingTriggers(true)",
         group = "all"
      }
   ) then
      return true
   else
      AnsiNote(ColoursToANSI("@RERROR CREATING PATTERN: @Y"..original_pattern))
      Simulate(ColoursToANSI("@RThis may be caused by needing to escape dangling magic characters in your pattern with @Y%@R (Read https://www.lua.org/pil/20.2.html for information about Lua patterns)\r\n"))
      return false
   end
end

function set_triggers()
   DeleteTriggerGroup("all")
   for i,sub in ipairs(subs) do
      apply_pattern_as_trigger(sub.original, sub.nocase, sub.alone)
   end
   for i,gag in ipairs(gags) do
      apply_pattern_as_trigger(gag.original, gag.nocase, gag.alone)
   end
end

-- init tables
loadstring( GetVariable("subs") or "subs = {}" )()
loadstring( GetVariable("gags") or "gags = {}" )()

set_triggers()

function usagesub(line, embedded)
   if not embedded then
      Note()
   end

   if not embedded then
      AnsiNote(ColoursToANSI("You typed: '@W"..line.."@Y'"))
      tts_warning()
      Note()
   end
   AnsiNote(ColoursToANSI("@YAvailable commands for the #sub/#gag plugin are:"..
   "\n@Y #subs             : List all current substitutions"..
   "\n@Y #gags             : List all current gags"..
   "\n@Y #sub {A} {B}      : Replaces phrase A with phrase B"..
   "\n@Y #unsub #<number>  : Removes numbered substitution"..
   "\n@Y #gag {A}          : Gag lines with phrase A"..
   "\n@Y #ungag #<number>  : Removes numbered gag"))
   if not embedded then
      AnsiNote(ColoursToANSI("@Y #sub help         : More complete help for this plugin"))
   end
   AnsiNote(ColoursToANSI("\n@w Note that you must use curly braces around each phrase for demarcation,"..
   "\n@w not quotation marks or anything else."..
   "\n@w Add @C#alone@w to the line to only match at word or color boundaries."..
   "\n@w Add @C#nocase@w to the line to do case-insensitive matching."))
   if not embedded then
      Note()
   end
end

function tts_warning()
   AnsiNote(ColoursToANSI("@cNote: If you are using text to speech, you will need to have enabled"..
   "\n@call punctuation reading to follow the documentation for this plugin."..
   "\n@cThe plugin uses some symbols for interaction, and the full help includes"..
   "\n@cexample Lua plugin code as well."))
end

function helpsub(name, line, wildcards)

   if wildcards[1] ~= "help" and wildcards[1] ~= "#help" then
      usagesub(line, false)
      return
   end

   local header = "begin help for the #sub/#gag plugin"
   AnsiNote(ColoursToANSI("\n\n@Y"..string.rep(" ", (60-#header)/2)..header))
   tts_warning()
   AnsiNote(ColoursToANSI("\n@w"..GetPluginInfo(GetPluginID(), 3):gsub("(@%w)", "%1@%1").."\n@Y"))
   usagesub(line, true)
   AnsiNote(ColoursToANSI(
   "@w example: @C#sub {hello} {Howdy} #alone #nocase"..
   "\n@w          This will match HeLlO but not othello."..
   "\n@w"..
   "\n@w Parentheses will act as captures. Use '%' to escape literal '(', ')', and '%'."..
   "\n@w example: @C#sub {(player)} {%1 (rude)} #alone #nocase"..
   "\n@w          This will do almost the same things as"..
   "\n@w          @C#sub {player} {player (rude)} #alone #nocase"..
   "\n@w          but it will preserve the original capitalization."..
   "\n@w"..
   "\n@w Add @C#function@w to a #sub line to pass matching components to a plugin function"..
   "\n@w instead of doing a direct replacement."..
   "\n@w For this, your replacement pattern must be @Wplugin_id:function_name@w."..
   "\n@w example: @C#sub {player} {12345678901234567890abcd:my_example} #alone #function"..
   "\n@w          Then in your plugin with ID 12345678901234567890abcd,"..
   "\n@w          you would add a new my_example function. It could"..
   "\n@w          be something like:"..
   "\n@w@C        function my_example(...)"..
   "\n@w@C          local args = {...}"..
   "\n@w@C          if my_plugin_variable == 100 then"..
   "\n@w@C            -- returning a string says replace with this"..
   "\n@w@C            return args[1]..\" (@@Rbutternut squash$C)\""..
   "\n@w@C          else"..
   "\n@w@C            -- returning false or nil says don't do a replacement"..
   "\n@w@C            return false"..
   "\n@w@C          end"..
   "\n@w@C        end"..
   "\n@w Since gags don't normally have a replacement pattern field, adding one"..
   "\n@w will make them behave similarly."..
   "\n@w There is no need to add #function for gags."..
   "\n@w example: @C#gag {player} {12345678901234567890abcd:my_new_gag} #alone"..
   "\n@w          Then in your plugin with ID 12345678901234567890abcd,"..
   "\n@w          you could add a new my_new_gag function like:"..
   "\n@w@C        function my_new_gag()"..
   "\n@w@C          local line = CallPlugin(\"26240e292291e159e1ff3cde\",\"current_line\")"..
   "\n@w@C          if line:sub(1,15) == string.char(255,250,201)..\"comm.channel\" then"..
   "\n@w@C            -- returning true says gag this if it's a gmcp comm.channel message"..
   "\n@w@C            return true"..
   "\n@w@C          else"..
   "\n@w@C            -- returning false or nil says don't gag"..
   "\n@w@C            return false"..
   "\n@w@C          end"..
   "\n@w@C        end"..
   "\n@w@C"..
   "\n@w As shown, using @CCallPlugin(\"26240e292291e159e1ff3cde\", \"current_line\")@w"..
   "\n@w in your handler function will return the message being processed."..
   "\n@Y"..string.rep(" ", (60-#header:gsub("begin","end"))/2)..header:gsub("begin","end")))
end


function listsub(name, line, wildcards)
   ColourNote("yellow","","")
   ColourNote("yellow",""," Current #subs:")
   ColourNote("yellow","","/-----------------------------------------------------------------------------\\")
   for i,v in ipairs(subs) do
      AnsiNote(ColoursToANSI("@Y"..string.format("   %4u",i)..": "..format_sub(v)))
   end
   ColourNote("yellow","","\\-----------------------------------------------------------------------------/")
   ColourNote("yellow","","")
 end


function listgag(name, line, wildcards)
   ColourNote("yellow","","")
   ColourNote("yellow",""," Current #gags:")
   ColourNote("yellow","","/-----------------------------------------------------------------------------\\")
   for i,v in ipairs(gags) do
      AnsiNote(ColoursToANSI("@Y"..string.format("   %4u",i)..": "..format_gag(v)))
   end
   ColourNote("yellow","","\\-----------------------------------------------------------------------------/")
   ColourNote("yellow","","")
 end


function find_in(set, original, nocase, alone, use_function)
   for i,v in ipairs(set) do
      if v.original == original and v.nocase == nocase and v.alone == alone and v.use_function == use_function then
         return i
      end
   end
end


function remsub(name, line, wildcards, silent)
   local found_index = tonumber(wildcards[1])
   local found = found_index and subs[found_index] or false

   if not silent then
      Note()
      if found then
         AnsiNote(ColoursToANSI("@Ysub #"..found_index.." removed. Formerly: ["..format_sub(found).."]"))
      else
         ColourNote("yellow","","sub #"..tostring(wildcards[1]).." not found.")
      end
   end
   if found then
      table.remove(subs, found_index)
      set_triggers()
      SaveState()
   end
end


function format_gag(gag)
   return "\"@W"..gag.original:gsub("@","@@").."@Y\""..(gag.nocase and " #nocase" or "")..(gag.alone and " #alone" or "")..
            (gag.use_function and (" @Y--> #function \"@W"..gag.use_function:gsub("@","@@").."@Y\"") or "")
end


function format_sub(sub)
   return "\"@W"..sub.original:gsub("@","@@").."@Y\""..(sub.nocase and " #nocase" or "")..(sub.alone and " #alone" or "")..
            " @Y--> "..
            (sub.use_function and "#function " or "").."\"@W"..sub.tostr:gsub("@","@@").."@Y\""
end


function remgag(name, line, wildcards, silent)
   local found_index = tonumber(wildcards[1])
   local found = found_index and gags[found_index] or false

   if not silent then
      Note()
      if found then
         AnsiNote(ColoursToANSI("@Ygag #"..found_index.." removed. Formerly: ["..format_gag(found).."]"))
      else
         ColourNote("yellow","","gag #"..tostring(wildcards[1]).." not found.")
      end
   end
   if found then
      table.remove(gags,found_index)
      set_triggers()
      SaveState()
   end
end

function addsub(name, line, wildcards)
   local fromstr = wildcards[1]
   local tostr = wildcards[2]
   local nocase = wildcards[4] ~= ""
   local alone = wildcards[5] ~= ""
   local use_function = wildcards[6] ~= ""

   if use_function then
      local s,e = tostr:find("%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x:%S*")
      if s ~= 1 or e ~= #tostr then
         AnsiNote(ColoursToANSI("\n@YYou specified @W#function@Y, but pattern '@W"..tostr.."@Y' does not meet the format requirements."..
            "\nPlease use {@W24_hexadecimal_digit_plugin_id:plugin_function_name@Y} as indicated in @W#sub help@Y."))
         return
      end
   end

   if nocase then
      fromstr = string.gsub(fromstr, '(%a)', function (v) return '['..string.upper(v)..string.lower(v)..']' end)
   end
   if alone then
      fromstr = "%f[^%c%z%s%p]"..fromstr.."%f[%c%z%s%p]"
   end
   if nocase or alone then
      ColourNote("yellow", "", "You specified"..(nocase and " #nocase" or "")..(alone and " #alone" or "")..", so converting your #sub patterns...")
      ColourNote("yellow", "", "")
      ColourNote("yellow", "", "\""..wildcards[1].."\"")
      ColourNote("yellow", "", "becomes")
      ColourNote("yellow", "", "\""..fromstr.."\"")
   end

   local found = find_in(subs, wildcards[1], nocase, alone, use_function)
   if found then remsub(nil, nil, {found}) end

   if apply_pattern_as_trigger(wildcards[1], nocase, alone) then
      table.insert(subs,
      {
         fromstr=fromstr,
         tostr=tostr,
         original=wildcards[1],
         nocase=nocase,
         alone=alone,
         use_function=use_function
      })

      AnsiNote(ColoursToANSI("@YCreated sub "..#subs..": "..format_sub(subs[#subs])))
   end

   SaveState()
end


function addgag(name, line, wildcards)

   local gagstr = wildcards[1]
   local nocase = wildcards[3] ~= ""
   local alone = wildcards[4] ~= ""

   local use_function = wildcards[5] ~= "" and wildcards[5] or nil

   if use_function then
      local s,e = use_function:find("%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x:%S*")
      if s ~= 1 or e ~= #use_function then
         AnsiNote(ColoursToANSI("\n@YYou specified @W#function@Y, but pattern '@W"..use_function.."@Y' does not meet the format requirements."..
            "\nPlease use {@W24_hexadecimal_digit_plugin_id:plugin_function_name@Y} as indicated in @W#sub help@Y."))
         return
      end
   end

   if nocase then
      gagstr = string.gsub(gagstr, '(%a)', function (v) return '['..string.upper(v)..string.lower(v)..']' end)
   end
   if alone then
      gagstr = "%f[^%c%z%s%p]"..gagstr.."%f[%c%z%s%p]"
   end

   if alone or nocase then
      ColourNote("yellow", "", "You specified"..(nocase and " #nocase" or "")..(alone and " #alone" or "")..", so converting your #gag pattern...")
      ColourNote("yellow", "", "")
      ColourNote("yellow", "", "\""..wildcards[1].."\"")
      ColourNote("yellow", "", "becomes")
      ColourNote("yellow", "", "\""..gagstr.."\"")
   end

   local found = find_in(gags, wildcards[1], nocase, alone, use_function)
   if found then remgag(nil, nil, {found}) end

   if apply_pattern_as_trigger(wildcards[1], nocase, alone) then
      table.insert(gags, {
         gagstr=gagstr,
         original=wildcards[1],
         nocase=nocase,
         alone=alone,
         use_function=use_function
         })

      AnsiNote(ColoursToANSI("@YCreated gag "..#gags..": "..format_gag(gags[#gags])))
   end

   SaveState()
end


function OnPluginSaveState()
   SetVariable("subs", serialize.save("subs"))
   SetVariable("gags", serialize.save("gags"))
end


prev_text = ""
EOL = "\n"


function OnPluginDisconnect()
   OnPluginConnect()
end


function OnPluginConnect()
   dosubs = false
   prev_text = ""
end


function OnPluginListChanged ()
   if IsPluginInstalled("26240e292291e159e1ff3cde") then
      ColourNote("yellow","red","You can't have two text substitution plugins active at the same time.")
      ColourNote("yellow","red","Remove the active one first before adding the other.")
      UnloadPlugin("26240e292291e159e1ff3cde")
   end
end -- OnPluginListChanged


-- proxy_sub("26240e292291e159e1ff3cde:test")
function proxy_sub(plugin_func_str, prev_color)
   local callstart = 'local a,b = CallPlugin("'..plugin_func_str:gsub(':', '","')..'"'
   return function(...)
      local params = {}
      for n=1,select('#',...) do
         params[#params+1] = '"'..select(n,...):gsub('"', '\\"')..'"'
      end
      local func = callstart..(#params > 0 and (","..table.concat(params,",")) or "")..'); if a ~= 0 then Note("Error in sub: "..b) else return b and string.gsub(b,"%$C", "'..prev_color..'") end'
      return loadstring(func)()
   end
end


function proxy_gag(plugin_func_str)
   local callstart = 'local a,b = CallPlugin("'..plugin_func_str:gsub(':', '","')..'"'
   return function(...)
      local params = {}
      for n=1,select('#',...) do
         params[#params+1] = '"'..select(n,...):gsub('"', '\\"')..'"'
      end
      local func = callstart..(#params > 0 and (","..table.concat(params,",")) or "")..'); if a ~= 0 then Note("Error in gag: "..b) else return b end'
      return loadstring(func)()
   end
end


function do_gags_against_coded_colors_table(msg_t)
   for i = 1,#msg_t,2 do
      local color_bit = msg_t[i]
      for _,v in ipairs(gags) do
         if color_bit:find(v.gagstr) then
            if not v.use_function then
               return true
            else
               return proxy_gag(v.use_function)()
            end
         end
      end
   end
   return false
end


function do_subs_against_coded_colors_table(msg_t)
   for i = 1,#msg_t,2 do
      local color_bit = msg_t[i]
      for _,v in ipairs(subs) do
         local prev_color = msg_t[i-1] or "@x007"
         local replacement = v.use_function and proxy_sub(v.tostr, prev_color) or v.tostr:gsub("%$C", prev_color)
         local ok,ret = pcall(string.gsub, color_bit, v.fromstr, replacement)
         if not ok then
            AnsiNote(ColoursToANSI("@YError in sub ["..format_sub(v).."]: "..ret))
         else
            color_bit = ret
         end
      end
      msg_t[i] = color_bit
   end
   return table.concat(msg_t)
end


cur_line = ""
function current_line()
   return cur_line
end


function filter_trigger(name, line, wildcards, styles)
   local old_line = StylesToColours(styles)
   local new_line = filter_string(old_line)
   if new_line then
      EnableTriggerGroup("all", false)
      Simulate(ColoursToANSI(new_line).."\r\n")
      EnableTriggerGroup("all", true)
   end
end


-- returns nil if gagged, otherwise returns the modified message
-- input: string with Aardwolf color codes
function filter_string(msg)
   cur_line = msg

   -- Matching #alone patterns at color and line boundaries is easier if
   -- we canonicalize the color codes first.
   local msg_t = canonicalize_colours(msg):split("%f[@]@x%d%d%d", true)

   local gagged = do_gags_against_coded_colors_table(msg_t)
   if not gagged then
      return do_subs_against_coded_colors_table(msg_t)
   else
      return nil
   end
end

]]>
</script>
</muclient>
